AWSTemplateFormatVersion: '2010-09-09'
Parameters:

  StageName:
    Type: String
    Default: 'dev'
    Description: 'Stage name for the API Gateway deployment'

  LambdaFunctionName:
    Type: String
    Default: 'event-processor-lambda'
    Description: 'Name of the Lambda function'

  S3BucketName:
    Type: String
    Description: 'S3 bucket name where the Lambda code is stored'
    Default: 'lambda-deployment-event-bridge'

  EventProcessorLambdaS3Key:
    Type: String
    Description: 'S3 key for the Lambda code'

  LambdaTimeout:
    Type: Number
    Default: 120
    Description: 'Timeout for the Lambda function in seconds'

  EventBusName:
    Type: String
    Description: 'Name of the EventBridge bus'

Resources:

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaDynamoDBPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:*'
                Resource: '*'
        - PolicyName: 'LambdaEventBridgePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'events:PutEvents'
                Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${EventBusName}'


  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: 'org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref EventProcessorLambdaS3Key
      Runtime: 'java21'
      Timeout: !Ref LambdaTimeout
      MemorySize: 512
      Environment:
        Variables:
          MAIN_CLASS: 'br.com.fredericci.EventProcessor'
          EVENT_BUS_NAME: !Ref EventBusName

  EventProcessorLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EventProcessorRule.Arn

  EventProcessorRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventBusName: !Ref EventBusName
      EventPattern:
        source:
          - "custom.api.gateway"
        detail-type:
          - "InputEvent"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "EventProcessorTarget"

  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: 3
